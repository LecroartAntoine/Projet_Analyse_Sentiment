name: Deploy FastAPI App (from API folder)

on:
  push:
    branches:
      - main  

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - name: Install dependencies (for tests on runner)
        run: |
          python -m pip install --upgrade pip
          # Install requirements from the api/ directory
          pip install -r api/requirements.txt
          # Ensure pytest is installed if not in api/requirements.txt
          # pip install pytest # Or include it in a dev-requirements.txt

      - name: Run tests
        env : 
          APPLICATIONINSIGHTS_CONNECTION_STRING : ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
        working-directory: ./api
        run: pytest

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add remote host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Create deployment directory on server (if it doesn't exist)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "mkdir -p /srv/airparadis"

      - name: Sync application files (api/ folder) to server using SCP
        run: |
          echo "Copying contents of ./api/ to server..."
          scp -r -o StrictHostKeyChecking=no ./api/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/srv/airparadis/
          echo "SCP command finished."

      - name: Execute remote commands (venv setup, install, restart service)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Can be used directly by ssh-action
          port: 22
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            # Ensure python3-venv is installed
            if ! dpkg -s python3-venv > /dev/null 2>&1; then
              echo "python3-venv not found. Installing..."
              sudo apt-get update -qq
              sudo apt-get install -y python3-venv
            else
              echo "python3-venv is already installed."
            fi

            APP_DIR="/srv/airparadis"
            VENV_DIR="$APP_DIR/venv"
            PYTHON_EXECUTABLE="$VENV_DIR/bin/python" # This will be created by the new venv
            PIP_EXECUTABLE="$VENV_DIR/bin/pip"       # This will be created by the new venv
            SERVICE_NAME="airparadis"

            echo "Changing to app directory: $APP_DIR"
            cd $APP_DIR || { echo "Failed to cd to $APP_DIR"; exit 1; }

            echo "Creating/Updating .env file from GitHub Secret"
            # Using heredoc for robustness
            cat << EOF > .env
            ${{ secrets.DOT_ENV_CONTENT }}
            EOF
              chmod 600 .env

              echo "Setting up Python virtual environment in $VENV_DIR"
              # Remove existing venv directory to ensure a clean state
              if [ -d "$VENV_DIR" ]; then
                echo "Removing existing virtual environment directory: $VENV_DIR"
                sudo rm -rf "$VENV_DIR" # Use sudo if the user doesn't have perms, or ensure deploy_user owns APP_DIR
              fi
              echo "Creating new virtual environment."
              python3 -m venv "$VENV_DIR" # Now this should create a complete venv

              echo "Installing/updating dependencies"
              # Check if pip executable exists before trying to use it
              if [ ! -f "$PIP_EXECUTABLE" ]; then
                  echo "ERROR: pip executable not found at $PIP_EXECUTABLE after creating venv."
                  exit 1
              fi
              $PIP_EXECUTABLE install --upgrade pip
              $PIP_EXECUTABLE install -r requirements.txt

              echo "Reloading systemd and restarting FastAPI service: $SERVICE_NAME"
              sudo systemctl daemon-reload
              sudo systemctl restart $SERVICE_NAME
              sleep 3
              sudo systemctl status $SERVICE_NAME --no-pager || echo "Service status check failed or service not fully up yet."

              echo "Deployment successful!"

    