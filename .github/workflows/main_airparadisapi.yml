name: Deploy FastAPI App (from API folder)

on:
  push:
    branches:
      - main  # Or your deployment branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Match your server's Python or app requirement

      - name: Install dependencies (for tests on runner)
        run: |
          python -m pip install --upgrade pip
          # Install requirements from the api/ directory
          pip install -r api/requirements.txt
          # Ensure pytest is installed if not in api/requirements.txt
          # pip install pytest # Or include it in a dev-requirements.txt

      - name: Run tests
        env : 
          APPLICATIONINSIGHTS_CONNECTION_STRING : ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
        run: pytest
        # If your tests need to be run from within the api/ directory:
        # working-directory: ./api
        # run: pytest

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add remote host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Sync application files (api/ folder) to server
        # This uses rsync to efficiently copy the *contents* of the ./api/ folder.
        # The trailing slash on ./api/ is important.
        run: |
          rsync -avz --delete \
            --exclude='__pycache__/' \
            --exclude='*.pyc' \
            --exclude='venv/' \
            ./api/ ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/srv/my_fastapi_app/
        # This copies files like api/main.py to /srv/my_fastapi_app/main.py

      - name: Execute remote commands
        uses: appleboy/ssh-action@v1.0.3 # Using a specific version
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Can be used directly by ssh-action
          port: 22
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            APP_DIR="/srv/my_fastapi_app"
            VENV_DIR="$APP_DIR/venv"
            PYTHON_EXECUTABLE="$VENV_DIR/bin/python"
            PIP_EXECUTABLE="$VENV_DIR/bin/pip"
            SERVICE_NAME="my_fastapi_app" # Match your systemd service file name

            echo "Changing to app directory: $APP_DIR"
            cd $APP_DIR || { echo "Failed to cd to $APP_DIR"; exit 1; }

            echo "Creating/Updating .env file from GitHub Secret"
            printf "%s\n" "${{ secrets.DOT_ENV_CONTENT }}" > .env
            chmod 600 .env

            echo "Setting up/updating Python virtual environment in $VENV_DIR"
            if [ ! -d "$VENV_DIR" ]; then
              echo "Creating new virtual environment."
              python3 -m venv $VENV_DIR
            else
              echo "Virtual environment already exists."
            fi

            echo "Activating virtual environment and installing/updating dependencies"
            # requirements.txt is now directly in $APP_DIR (synced from api/requirements.txt)
            $PIP_EXECUTABLE install --upgrade pip
            $PIP_EXECUTABLE install -r requirements.txt

            echo "Reloading systemd and restarting FastAPI service: $SERVICE_NAME"
            sudo systemctl daemon-reload
            sudo systemctl restart $SERVICE_NAME
            sleep 3
            sudo systemctl status $SERVICE_NAME --no-pager || echo "Service status check failed or service not fully up yet."

            echo "Deployment successful!"